/// user  model

import mongoose from "mongoose";
const userSchema=new mongoose.Schema({
    name:{
        type:String,
        required:true
    },
    email:{
        type:String,
        required:true,
        unique:true
    },
    password:{
        type:String,
        required:true
    },
      role:{
        type:String,
        enum:["owner","user"], default:'user'
    },
      image:{
        type:String,
        default:''
    },
    isVerified:{
        type:Boolean,
        default:false
    },
    otpCode:{
        type:String,
        default:null
    },
    otpExpiresAt:{
        type:Date,
        default:null
    }
},{
    timestamps:true
})
const User=mongoose.model("User",userSchema)
export  default User;



////

//car model

import mongoose, { model }  from "mongoose";
//import { Types } from "mongoose";
const {ObjectId}=mongoose.Schema.Types

const CarSchema = new mongoose.Schema(
  {
    owner: { type: ObjectId, ref: "User", required: true, index: true },
    brand: { type: String, required: true, trim: true },
    model: { type: String, required: true, trim: true },
    image: { type: String, required: true },
    year: { type: Number, required: true, min: 1900 },
    category: { type: String, required: true, trim: true }, // e.g., SUV, Sedan
    seating_capacity: { type: Number, required: true, min: 1 },
    fuel_type: { type: String, required: true, trim: true }, // e.g., Petrol, Diesel, Electric
    transmission: { type: String, required: true, trim: true }, // Automatic / Manual
    pricePerDay: { type: Number, required: true, min: 0 },
    location: { type: String, required: true, trim: true, index: true },
    description: { type: String, required: true, trim: true },
    isAvailable: { type: Boolean, default: true, index: true },
    isBooked: { type: Boolean, default: false, index: true },
  },
  { timestamps: true }
);
// helpful indexes for common queries
CarSchema.index({ owner: 1, isAvailable: 1 });
CarSchema.index({ location: 1, isAvailable: 1 });
CarSchema.index({ brand: 1, model: 1, year: 1 });
CarSchema.index({ isBooked: 1, isAvailable: 1 });
const Car =mongoose.model("Car",CarSchema)

export default Car;


/// booking model


import mongoose, { model }  from "mongoose";
//import { Types } from "mongoose";
const {ObjectId}=mongoose.Schema.Types

const bookingSchema = new mongoose.Schema(
  {
   car:{type:ObjectId, ref:"Car", required:true, index:true},
   user:{type:ObjectId, ref:"User", required:true, index:true},
   owner:{type:ObjectId, ref:"User", required:true, index:true},
   pickupDate:{type: Date, required:true},
   returnDate:{type:Date, required:true},
   status:{type:String, enum:["pending", "confirmed", "cancelled"], default: "pending", index:true},
   price:{type:Number, required :true}
  },
  { timestamps: true }
);
bookingSchema.index({ pickupDate: 1, returnDate: 1, car: 1 });
const Booking =mongoose.model("Booking",bookingSchema)

export default Booking;


// feedback model 


import mongoose from "mongoose";

const feedbackSchema = new mongoose.Schema({
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    car: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Car',
        required: false
    },
    rating: {
        type: Number,
        required: true,
        min: 1,
        max: 5
    },
    comment: {
        type: String,
        required: true,
        maxlength: 500
    },
    isApproved: {
        type: Boolean,
        default: false
    },
    status: {
        type: String,
        enum: ['pending', 'approved', 'rejected'],
        default: 'pending'
    }
}, {
    timestamps: true
});

const Feedback = mongoose.model("Feedback", feedbackSchema);
export default Feedback;